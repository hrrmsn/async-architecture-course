Краткое описание системы Awesome Task Exchange System (aTES) для UberPopug Inc



1. Обоснование, почему были выбраны именно такие сервисы.

Ответ: решил выделить механику каждого логического блока системы в отдельный микросервис.
У нас есть части системы, занимающиеся авторизацией, менеджментом создаваемых задач, 
аккаунтингом и аналитикой. Каждую из этих частей вынес в отдельный микросервис.
Это кажется разумным ещё и с той точки зрения, что будет проще вносить изменения в 
каждую из этих систем. Например, мы решили изменить логику авторизации. Тогда просто
вносим изменения в сервис авторизации и деплоем его. В другие сервисы вносить изменения
нет надобности.


2. Как всё работает.

Ответ: вижу для себя работу всей системы примерно так
а) task-tracker-service и другие микросервисы получают auth токены от auth-service, 
эти токены затем проверяются на стороне каждого микросервиса отдельно при операциях,
требующих наличия конкретной роли
б) события на стороне task-tracker-service по типу "создание задачи", "реассайн задач", 
"закрытие задачи" через брокер сообщений отправляются в сервис accounting-service
в) accounting-service по мере вычитки сообщений из брокера сообщений обрабатывает их, делает
нужные подсчёты и кладёт результаты в БД
г) по мере того, как accounting-service завершает подсчёты, на стороне accounting-service
формируются сообщения, которые также через брокер сообщений отправляются уже в 
analytics-service (через другой топик)
д) также в сервисе accounting-service будет нужна кронджоба, делающая подсчёт за день и 
рассылку результатов сотрудникам на почту


3. Проблемы с данными. Что делать, если упадёт сеть, БД и так далее.

Ответ: хм, кажется логичным для каждого сервиса реализовать кеш, который бы хранил какое-то
непродолжительное время (около 1 часа, например) наиболее частые запросы в базу и результат
запроса. Это помогло бы на случай временного падения базы.

Если падает сеть, то отвалится авторизация и в топиках будет копиться лаг. Кажется, сломанную
из-за осутствия сети авторизацию починить нельзя (в теории наверное можно было бы продлить время
жизни auth токена, чтобы пореже ходить в auth-service, но это всё равно не поможет логиниться
в систему). 

Проблема с лагом топика - тут, думаю, надо при вычитке из топика делать ack, чтобы
брокер сообщений понимал, вычитали ли мы сообщение или нет. Тогда в случае падения сети нестрашно,
что скопится лаг. Мы его потом разгребём - главное, что не потеряем сообщения, т.к. не проставим 
ack непрочитанным из брокера сообщениям.


4. Спорные моменты.

а) как будто 4-х микросервисов многовато, возможно, можно было бы обойтись меньшим кол-ом
б) не уверен насчёт того, что выбранный мной способ использования брокера сообщений корректный
(возможно, стоит передавать другие данные и между другими микросервисами)

